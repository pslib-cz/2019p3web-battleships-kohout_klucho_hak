// <auto-generated />
using System;
using BattleShips.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BattleShips.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200504073025_InitialWithSeed")]
    partial class InitialWithSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BattleShips.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPlayedGames")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "54a65766-3144-4541-8c56-872ae76d593e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2080b6b6-c9f9-4783-8ef3-f540f9994871",
                            Email = "player1@pslib.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER1@PSLIB.CZ",
                            NormalizedUserName = "PLAYER1@PSLIB.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6fMWCJXnEht0lxMRHtkrtDphMQdQHesFZ7F7CQz/AKx8HHipQO7Ojxmj+Fphf3qw==",
                            PhoneNumberConfirmed = false,
                            PlayerName = "Player1",
                            Score = 0,
                            SecurityStamp = "da9598f5-1345-406f-895b-7497aaf9b158",
                            TotalPlayedGames = 0,
                            TwoFactorEnabled = false,
                            UserName = "player1@pslib.cz",
                            Wins = 0
                        },
                        new
                        {
                            Id = "056ae612-64e6-417b-ad73-0e904472ff4d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f384657-cea2-4419-a701-c298eb242e94",
                            Email = "player2@pslib.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER2@PSLIB.CZ",
                            NormalizedUserName = "PLAYER2@PSLIB.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6fMWCJXnEht0lxMRHtkrtDphMQdQHesFZ7F7CQz/AKx8HHipQO7Ojxmj+Fphf3qw==",
                            PhoneNumberConfirmed = false,
                            PlayerName = "Player2",
                            Score = 0,
                            SecurityStamp = "f5d52493-8bf6-4af3-97e2-80fb4d7f9a6e",
                            TotalPlayedGames = 0,
                            TwoFactorEnabled = false,
                            UserName = "player2@pslib.cz",
                            Wins = 0
                        },
                        new
                        {
                            Id = "1fe6c42c-f9e8-4cc6-845e-d8404f8e78f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2db3f77c-513a-4f1a-bdfe-3a3674ebd5fe",
                            Email = "player3@pslib.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER3@PSLIB.CZ",
                            NormalizedUserName = "PLAYER3@PSLIB.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6fMWCJXnEht0lxMRHtkrtDphMQdQHesFZ7F7CQz/AKx8HHipQO7Ojxmj+Fphf3qw==",
                            PhoneNumberConfirmed = false,
                            PlayerName = "Player3",
                            Score = 0,
                            SecurityStamp = "7ad564a7-276a-4de9-8900-9ce7084a7f7b",
                            TotalPlayedGames = 0,
                            TwoFactorEnabled = false,
                            UserName = "player3@pslib.cz",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("BattleShips.Data.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentPlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GameRound")
                        .HasColumnType("int");

                    b.Property<int>("GameSize")
                        .HasColumnType("int");

                    b.Property<int>("GameState")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserRound")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80828d2b-e7e0-4316-aa6b-cea1d08f413c"),
                            CurrentPlayerId = "54a65766-3144-4541-8c56-872ae76d593e",
                            GameRound = 0,
                            GameSize = 2,
                            GameState = 0,
                            MaxPlayers = 2,
                            OwnerId = "54a65766-3144-4541-8c56-872ae76d593e",
                            UserRound = 0
                        },
                        new
                        {
                            Id = new Guid("80828d2b-e7e0-4316-aa6b-cea1d08f413e"),
                            CurrentPlayerId = "54a65766-3144-4541-8c56-872ae76d593e",
                            GameRound = 0,
                            GameSize = 2,
                            GameState = 2,
                            MaxPlayers = 2,
                            OwnerId = "54a65766-3144-4541-8c56-872ae76d593e",
                            UserRound = 0
                        });
                });

            modelBuilder.Entity("BattleShips.Data.NavyBattlePiece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("PieceState")
                        .HasColumnType("int");

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserGameId");

                    b.ToTable("NavyBattlePieces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hidden = true,
                            PieceState = 1,
                            PosX = 0,
                            PosY = 0,
                            TypeId = 1,
                            UserGameId = 1
                        },
                        new
                        {
                            Id = 2,
                            Hidden = true,
                            PieceState = 1,
                            PosX = 1,
                            PosY = 0,
                            TypeId = 1,
                            UserGameId = 1
                        },
                        new
                        {
                            Id = 3,
                            Hidden = true,
                            PieceState = 0,
                            PosX = 0,
                            PosY = 1,
                            TypeId = 1,
                            UserGameId = 1
                        },
                        new
                        {
                            Id = 4,
                            Hidden = true,
                            PieceState = 0,
                            PosX = 1,
                            PosY = 1,
                            TypeId = 1,
                            UserGameId = 1
                        },
                        new
                        {
                            Id = 5,
                            Hidden = true,
                            PieceState = 0,
                            PosX = 0,
                            PosY = 0,
                            TypeId = 1,
                            UserGameId = 2
                        },
                        new
                        {
                            Id = 6,
                            Hidden = true,
                            PieceState = 0,
                            PosX = 1,
                            PosY = 0,
                            TypeId = 1,
                            UserGameId = 2
                        },
                        new
                        {
                            Id = 7,
                            Hidden = true,
                            PieceState = 1,
                            PosX = 0,
                            PosY = 1,
                            TypeId = 1,
                            UserGameId = 2
                        },
                        new
                        {
                            Id = 8,
                            Hidden = true,
                            PieceState = 1,
                            PosX = 1,
                            PosY = 1,
                            TypeId = 1,
                            UserGameId = 2
                        });
                });

            modelBuilder.Entity("BattleShips.Data.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Ships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Submarine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Destroyer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cruiser"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Battleship"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Aircraft carrier"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Landing base"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hydro plane"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cruiser II"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Heavy Cruiser"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Catamaran"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Light battleship"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Aircraft carrier II"
                        });
                });

            modelBuilder.Entity("BattleShips.Data.ShipGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipGames");
                });

            modelBuilder.Entity("BattleShips.Data.ShipPiece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PieceState")
                        .HasColumnType("int");

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipPieces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PieceState = 3,
                            PosX = 1,
                            PosY = 1,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 2,
                            PieceState = 4,
                            PosX = 0,
                            PosY = 1,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 3,
                            PieceState = 4,
                            PosX = 1,
                            PosY = 0,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 4,
                            PieceState = 4,
                            PosX = 2,
                            PosY = 1,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 5,
                            PieceState = 4,
                            PosX = 1,
                            PosY = 2,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 6,
                            PieceState = 2,
                            PosX = 0,
                            PosY = 0,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 7,
                            PieceState = 2,
                            PosX = 2,
                            PosY = 0,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 8,
                            PieceState = 2,
                            PosX = 0,
                            PosY = 2,
                            ShipId = 1
                        },
                        new
                        {
                            Id = 9,
                            PieceState = 2,
                            PosX = 2,
                            PosY = 2,
                            ShipId = 1
                        });
                });

            modelBuilder.Entity("BattleShips.Data.ShipUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.Property<int>("UserGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.HasIndex("UserGameId");

                    b.ToTable("ShipUsers");
                });

            modelBuilder.Entity("BattleShips.Data.UserGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlayerState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "54a65766-3144-4541-8c56-872ae76d593e",
                            GameId = new Guid("80828d2b-e7e0-4316-aa6b-cea1d08f413e"),
                            PlayerState = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "056ae612-64e6-417b-ad73-0e904472ff4d",
                            GameId = new Guid("80828d2b-e7e0-4316-aa6b-cea1d08f413e"),
                            PlayerState = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BattleShips.Data.Game", b =>
                {
                    b.HasOne("BattleShips.Data.ApplicationUser", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId");

                    b.HasOne("BattleShips.Data.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleShips.Data.NavyBattlePiece", b =>
                {
                    b.HasOne("BattleShips.Data.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleShips.Data.UserGame", "UserGame")
                        .WithMany()
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleShips.Data.ShipGame", b =>
                {
                    b.HasOne("BattleShips.Data.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleShips.Data.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleShips.Data.ShipPiece", b =>
                {
                    b.HasOne("BattleShips.Data.Ship", "Ship")
                        .WithMany("ShipPieces")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleShips.Data.ShipUser", b =>
                {
                    b.HasOne("BattleShips.Data.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleShips.Data.UserGame", "UserGame")
                        .WithMany()
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleShips.Data.UserGame", b =>
                {
                    b.HasOne("BattleShips.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BattleShips.Data.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BattleShips.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BattleShips.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleShips.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BattleShips.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
